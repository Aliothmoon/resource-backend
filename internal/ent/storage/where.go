// Code generated by ent, DO NOT EDIT.

package storage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/MirrorChyan/resource-backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// Directory applies equality check predicate on the "directory" field. It's identical to DirectoryEQ.
func Directory(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDirectory, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// DirectoryEQ applies the EQ predicate on the "directory" field.
func DirectoryEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDirectory, v))
}

// DirectoryNEQ applies the NEQ predicate on the "directory" field.
func DirectoryNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDirectory, v))
}

// DirectoryIn applies the In predicate on the "directory" field.
func DirectoryIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldDirectory, vs...))
}

// DirectoryNotIn applies the NotIn predicate on the "directory" field.
func DirectoryNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldDirectory, vs...))
}

// DirectoryGT applies the GT predicate on the "directory" field.
func DirectoryGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldDirectory, v))
}

// DirectoryGTE applies the GTE predicate on the "directory" field.
func DirectoryGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldDirectory, v))
}

// DirectoryLT applies the LT predicate on the "directory" field.
func DirectoryLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldDirectory, v))
}

// DirectoryLTE applies the LTE predicate on the "directory" field.
func DirectoryLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldDirectory, v))
}

// DirectoryContains applies the Contains predicate on the "directory" field.
func DirectoryContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldDirectory, v))
}

// DirectoryHasPrefix applies the HasPrefix predicate on the "directory" field.
func DirectoryHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldDirectory, v))
}

// DirectoryHasSuffix applies the HasSuffix predicate on the "directory" field.
func DirectoryHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldDirectory, v))
}

// DirectoryEqualFold applies the EqualFold predicate on the "directory" field.
func DirectoryEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldDirectory, v))
}

// DirectoryContainsFold applies the ContainsFold predicate on the "directory" field.
func DirectoryContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldDirectory, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldCreatedAt, v))
}

// HasVersion applies the HasEdge predicate on the "version" edge.
func HasVersion() predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionTable, VersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionWith applies the HasEdge predicate on the "version" edge with a given conditions (other predicates).
func HasVersionWith(preds ...predicate.Version) predicate.Storage {
	return predicate.Storage(func(s *sql.Selector) {
		step := newVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.NotPredicates(p))
}
