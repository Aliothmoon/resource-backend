// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/MirrorChyan/resource-backend/internal/ent"
	"github.com/MirrorChyan/resource-backend/internal/handler"
	"github.com/MirrorChyan/resource-backend/internal/logic"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewHandlerSet(logger *zap.Logger, db *ent.Client) *HandlerSet {
	resourceLogic := logic.NewResourceLogic(logger, db)
	resourceHandler := handler.NewResourceHandler(logger, resourceLogic)
	versionLogic := logic.NewVersionLogic(logger, db)
	storageLogic := logic.NewStorageLogic(logger, db)
	versionHandler := handler.NewVersionHandler(logger, versionLogic, storageLogic)
	wireHandlerSet := newHandlerSet(resourceHandler, versionHandler)
	return wireHandlerSet
}

// wire.go:

var logicSet = wire.NewSet(logic.NewResourceLogic, logic.NewVersionLogic, logic.NewStorageLogic)

var handlerSet = wire.NewSet(handler.NewResourceHandler, handler.NewVersionHandler)

type HandlerSet struct {
	ResourceHandler *handler.ResourceHandler
	VersionHandler  *handler.VersionHandler
}

func newHandlerSet(resourceHandler *handler.ResourceHandler, versionHandler *handler.VersionHandler) *HandlerSet {
	return &HandlerSet{
		ResourceHandler: resourceHandler,
		VersionHandler:  versionHandler,
	}
}
